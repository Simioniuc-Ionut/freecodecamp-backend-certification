// index.js
// where your node app starts

// Import dependencies
const express = require('express');
const swaggerJsdoc = require('swagger-jsdoc');
const swaggerUi = require('swagger-ui-express');

// Initialize Express app
const app = express();

// Swagger configuration
const swaggerOptions = {
  definition: {
    openapi: '3.1.0',
    info: {
      title: 'Express API with Swagger',
      version: '1.0.0',
      description: 'A simple CRUD API application with autogenerated Swagger documentation',
    },
    servers: [
      {
        url: 'http://localhost:3000',
      },
    ],
  },
  apis: ['./index.js'], // Path to the API docs
};

const swaggerSpecs = swaggerJsdoc(swaggerOptions);

app.use('/api-docs', swaggerUi.serve, swaggerUi.setup(swaggerSpecs));
// enable CORS (https://en.wikipedia.org/wiki/Cross-origin_resource_sharing)
// so that your API is remotely testable by FCC 
var cors = require('cors');
app.use(cors({optionsSuccessStatus: 200}));  // some legacy browsers choke on 204

// http://expressjs.com/en/starter/static-files.html
app.use(express.static('public'));

// http://expressjs.com/en/starter/basic-routing.html
app.get("/", function (req, res) {
  res.sendFile(__dirname + '/views/index.html');
});


// your first API endpoint... 

/**
 * @swagger
 * /api/hello:
 *   get:
 *     summary: Returns a greeting
 *     responses:
 *       200:
 *         description: A successful response
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 greeting:
 *                   type: string
 */
app.get("/api/hello", function (req, res) {
  res.json({greeting: 'hello API'});
});


/**
 * @swagger
 * /api/{date}:
 *   get:
 *     summary: Returns date information for a given date string or timestamp
 *     parameters:
 *       - in: path
 *         name: date
 *         required: true
 *         schema:
 *           type: string
 *         description: Date string or Unix timestamp
 *     responses:
 *       200:
 *         description: Date information
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 unix:
 *                   type: integer
 *                 utc:
 *                   type: string
 *       400:
 *         description: Invalid date
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 error:
 *                   type: string
 */
app.use("/api/:date?", (req, res, next) => {
  // Middleware to handle the date parameter
  let dataParam = req.params.date;
  let parsedDate;
  console.log("Data Param in middleware: ", dataParam);
  if (dataParam === undefined) {
   parsedDate =  new Date();
  }
  else if (!isNaN(dataParam)) {
   parsedDate = new Date(Number(dataParam));
  }
  else {
    parsedDate = new Date(dataParam);
  }
  console.log("Parsed Date: ", parsedDate);
  if (parsedDate.toString() === "Invalid Date") {
    return res.status(400).json({ error: "Invalid Date" });
  }
  req.parsedDate = parsedDate;
  next();
})
 .get("/api/:date?", (req, res) => {
  // 1753488000000
  let dataParam = req.parsedDate;
  console.log("Data Param in handler: ", dataParam); 
  let dateResponse = {
    unix: dataParam.getTime(),
    utc: dataParam.toUTCString()
  };
  res.json(dateResponse);
});

// Listen on port set in environment variable or default to 3000
var listener = app.listen(process.env.PORT || 3000, function () {
  console.log('Your app is listening on port ' + listener.address().port);
});
